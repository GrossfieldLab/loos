#!/usr/bin/env python3
#  This file is part of LOOS.
#
#  LOOS (Lightweight Object-Oriented Structure library)
#  Copyright (c) 2008, Tod D. Romo
#  Department of Biochemistry and Biophysics
#  School of Medicine & Dentistry, University of Rochester
#
#  This package (LOOS) is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation under version 3 of the License.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os

Import('env')
Import('loos')

clone = env.Clone()
clone.Prepend(LIBS=[loos])

apps = 'density-dist density-dist-windowed model2matlab frame2pdb contacts order_params bounding aligner svd rmsds xy_rdf xy_rdf_timeseries model-select rdf atomic-rdf crossing-waters'
apps = apps + ' svdcolmap averager convert2pdb traj2dcd reimage-by-molecule rmsd2ref rgyr rad-gyr dumpmol helix_kink subsetter torsion'
apps = apps + ' dcdinfo recenter-trj concat-selection trajinfo rmsf interdist paxes rmsfit rotamer'
apps = apps + ' drifter porcupine ramachandran renum-pdb exposure clipper rebond molshape native_contacts traj2matlab'
apps = apps + ' traj2pdb merge-traj center-molecule contact-time perturb-structure coverlap phase-pdb'
apps = apps + ' big-svd kurskew periodic_box area_per_lipid residue-contact-map'
apps = apps + ' cross-dist fcontacts serialize-selection transition_contacts fixdcd smooth-traj membrane_map packing_score'
apps = apps + ' mops dibmops xtcinfo model-meta-stats verap lipid_survival multi-rmsds rms-overlap'
apps = apps + ' esp_mesh dihedrals rna_suites'

list = []

for name in Split(apps):
    fname = name + '.cpp'
    prog = clone.Program(fname)
    list.append(prog)

PREFIX = env['PREFIX']
bin_path = os.path.join(PREFIX, "bin")
loos_tools = env.Install(bin_path, Split(apps))

# if darwin, run install_name_tool so the binaries can find the library
if env['host_type'] == 'Darwin':
    for app in Split(apps):
        app_path = os.path.join(bin_path, app)
        env.AddPostAction(app_path, "install_name_tool -change libloos.dylib @rpath/libloos.dylib " + app_path)


# Special handlign for scripts...
scripts = 'blurrogram.pl potential_profile.py gmxdump2pdb.pl mat2loos.pl'

for file in Split(scripts):
    PREFIX_BIN = os.path.join(PREFIX, "bin")
    Command(os.path.join(PREFIX_BIN, file), file,
            [
            Copy("$TARGET", "$SOURCE"),
            Chmod("$TARGET", 0o755)
            ])

env.Alias('tools_install', loos_tools)

Return('list')
